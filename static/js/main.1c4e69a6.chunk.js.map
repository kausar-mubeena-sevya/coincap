{"version":3,"sources":["components/Header.js","pages/Home/HomePage.js","pages/Details/DetailsPage.js","App.js","serviceWorker.js","index.js"],"names":["navStyle","color","Header","className","style","to","Component","imageStyles","height","width","HomePage","props","state","cryptoCurrencies","numberOfColumns","changeColumnsNumber","changeNumberOfColumns","bind","this","fetchCurrencies","axios","get","then","response","console","log","setState","data","catch","error","Fragment","length","Grid","container","spacing","direction","justify","alignItems","map","cryptoCurrency","item","xs","sm","md","key","id","Card","name","changePercent24Hr","CardContent","src","symbol","toLowerCase","alt","Button","onClick","variant","DetailsPage","historyData","timeData","chartData","labels","datasets","label","fill","backgroundColor","borderColor","push","time","priceUsd","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1c4e69a6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Link } from 'react-router-dom';\n\nconst navStyle = {\n    color : 'white'\n}\nclass Header extends Component {\n   \n    render() {\n        return (\n            <nav>\n                <ul className=\"nav-links\">\n                    <Link style={navStyle} to='/home'>\n                        <li>Home</li>\n                    </Link>\n                    <Link style={navStyle} to=\"/Details\">\n                    <li>Details</li>\n                    </Link>\n                </ul>\n            </nav>\n        )\n    }\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport axios from 'axios';\n//import { makeStyles } from '@material-ui/core/styles'\nimport {\n    Grid,\n    Card,\n    CardContent,\n    Button\n} from '@material-ui/core/'\n\n\nconst imageStyles = {\n    height : '70px',\n    width : '70px'\n}\nclass HomePage extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            cryptoCurrencies : [],\n            numberOfColumns : 3,\n            changeColumnsNumber: 4\n        }\n\n        this.changeNumberOfColumns = this.changeNumberOfColumns.bind(this)\n    }\n\n    componentDidMount() {\n        this.fetchCurrencies()\n    }\n\n    fetchCurrencies (){\n\n        axios.get(\"https://api.coincap.io/v2/assets\")\n        .then(response => {\n            console.log(response)\n            this.setState(\n                {\n                    cryptoCurrencies : response.data.data\n                }\n            )\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n    changeNumberOfColumns() {\n        if(this.state.numberOfColumns === 3){\n            this.setState({\n                numberOfColumns : 4,\n                changeColumnsNumber : 3\n            })\n        }\n        else\n            this.setState({\n                numberOfColumns : 3,\n                changeColumnsNumber : 4\n            })\n    }\n    render() {\n        const { cryptoCurrencies } = this.state;\n        const { numberOfColumns } = this.state;\n        \n        return (\n            <React.Fragment>\n                {\n                    cryptoCurrencies.length ? \n                    <Grid\n                        container\n                        spacing={2}\n                        direction=\"row\"\n                        justify=\"flex-start\"\n                        alignItems=\"flex-start\"\n                    >\n                    {cryptoCurrencies.map(cryptoCurrency => (\n                        <Grid item xs={12} sm={6} md={numberOfColumns} key={cryptoCurrency.id}>\n                            <Card>\n                                <div>\n                                {`Name : ${cryptoCurrency.name}`}\n                                </div>\n                                <div>\n                    Percentage Change : {<span className={cryptoCurrency.changePercent24Hr > 0 ? \"green\" : \"red\"}>{cryptoCurrency.changePercent24Hr}</span> }\n                                </div>\n                                <CardContent>\n                                <div>\n                                    <img style={imageStyles} src={`https://static.coincap.io/assets/icons/${cryptoCurrency.symbol.toLowerCase()}@2x.png`}\n                                    alt={cryptoCurrency.symbol}\n                                    />\n                                </div>\n                                </CardContent>\n                            </Card>\n                        </Grid>\n                    ))}\n                    </Grid>\n                    : \"\"\n                }\n                <Button onClick={this.changeNumberOfColumns} variant=\"outlined\" color=\"primary\">Switch to {numberOfColumns} col's per row</Button>\n            </React.Fragment>\n            \n        )\n    }\n}\n\nexport default HomePage\n","import React, { Component } from 'react'\nimport { Line } from 'react-chartjs-2';\nimport axios from 'axios'\nclass DetailsPage extends Component {\n    constructor(props){\n        super(props)\n\n        this.state = {\n            historyData : {}\n        }\n    }\n\n    componentDidMount() {\n        this.fetchCurrencies()\n    }\n\n    fetchCurrencies (){\n\n        let timeData=[];\n        let chartData = {\n            labels: [],\n            datasets: [\n                {\n                    label: 'Bitcoin',\n                data: timeData,\n                fill: true,\n                backgroundColor: \"rgba(75,192,192,0.2)\",\n                borderColor: \"rgba(75,192,192,1)\"\n                }\n            ]\n        }\n        axios.get(\"https://api.coincap.io/v2/assets/bitcoin/history?interval=d1\")\n        .then(response => {\n            console.log(response)\n            if(response.data.data){\n                response.data.data.map(data => {\n                    timeData.push(data.time/100000000)\n                    return chartData.labels.push(data.priceUsd/10)\n                    \n                })\n            }            \n            this.setState(\n                {\n                    historyData : chartData\n                }\n            )\n        })\n        .catch(error => {\n            console.log(error)\n        })\n    }\n    render() {\n        return (\n            <div className=\"bitcoin-line-chart\">\n                <Line data={this.state.historyData ? this.state.historyData : []}/>\n            </div>\n            \n        )\n    }\n}\n\nexport default DetailsPage\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport './App.css';\nimport Header from './components/Header';\nimport HomePage from './pages/Home/HomePage';\nimport DetailsPage from './pages/Details/DetailsPage';\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <Header />      \n        <Switch>\n          <Route path=\"coincap/\" exact component={HomePage} />\n          <Route path=\"coincap/Details\" component={DetailsPage} />\n          <Route path=\"coincap//Home\" exact component={HomePage} />\n        </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}